'use strict';

var fs = require('fs');
var path = require('path');
var debug = require('debug')('base:verb:verb-readme-generator');
var utils = require('./lib/utils');
var lint = require('./lib/lint');

/**
 * Verb readme generator
 */

module.exports = function generator(app, base) {
  if (!isValidInstance(app)) return;

  if (typeof app.pkg === 'undefined') {
    throw new Error('expected the base-pkg plugin to be registered');
  }
  if (typeof app.cwd === 'undefined') {
    app.cwd = process.cwd();
  }

  debug('initializing <%s>, called from <%s>', __filename, module.parent.id);

  /**
   * Begin timings (`verb --times`)
   */

  var time = new utils.Time();
  var diff = time.diff('verb-readme-generator', app.options);
  diff('start');

  /**
   * Set options
   */

  app.option('viewEngine', '*');
  app.option('engineOpts', {delims: ['{%', '%}']});
  app.option('toc.footer', '\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_');

  // customize alias
  app.option('toAlias', function readme(name) {
    if (/^verb-.*?-[\w]+/.test(name)) {
      return name.replace(/^verb-(.*?)-[\w]+/, '$1');
    }
    return name.slice(name.lastIndexOf('-') + 1);
  });

  diff('options');

  /**
   * Plugins
   */

  app.use(utils.conflicts());
  app.use(require('verb-defaults'));
  app.use(require('verb-collections'));
  app.use(require('verb-repo-helpers'));
  app.use(require('verb-repo-data'));
  app.use(require('verb-toc'));
  diff('plugins');

  /**
   * Middleware
   */

  app.task('middleware', { silent: true }, function(cb) {
    if (app.option('lint.reflinks')) {
      app.postRender(/\.md$/, require('./lib/reflinks')(app));
    }

    if (app.option('sections')) {
      app.onLoad(/\.md$/, require('./lib/sections')(app));
    }

    app.preRender(/(verb|readme)\.md$/i, function(file, next) {
      utils.del(path.resolve(app.cwd, 'readme.md'), next);
    });

    app.onLoad(/(verb|readme)\.md$/, lint.layout(app));
    app.on('readme-generator:end', function() {
      var warnings = app.get('cache.readmeWarnings');
      warnings.forEach(function(obj) {
        console.log(obj.filename + ' | ' + obj.message);
      });
    });
    diff('middleware');
    cb();
  });

  /**
   * Load data to be passed to templates at render time
   */

  app.task('data', { silent: true }, function(cb) {
    debug('loading data');

    if (utils.exists(path.join(app.cwd, 'bower.json'))) {
      app.data({bower: true});
    }

    if (app.isGenerator) {
      app.option('toAlias', function(name) {
        return utils.camelcase(name.replace(/^generate-/, ''));
      });
    }

    app.data({prefix: 'Copyright'});
    debug('data finished');

    diff('data');
    cb();
  });

  /**
   * Load .verb.md
   */

  app.task('verbmd', { silent: true }, function(cb) {
    debug('loading .verb.md');

    if (app.views.files['README'] || app.views.files['.verb']) {
      cb();
      return;
    }

    // try to load .verb.md from user cwd
    if (utils.exists(path.resolve(app.cwd, '.verb.md'))) {
      app.file('README.md', {contents: read(app, '.verb.md', app.cwd)});
      cb();
      return;
    }

    if (app.options.verbmd === false) {
      cb();
      return;
    }

    app.build('ask', cb);
  });

  /**
   * Want to add a .verb.md file?
   */

  app.task('ask', function(cb) {
    // if no .verb.md exists, offer to add one
    app.confirm('verbmd', 'Can\'t find a .verb.md, want to add one?');
    app.ask('verbmd', { save: false }, function(err, answers) {
      if (err) return cb(err);
      if (answers.verbmd === true) {
        app.build('new', cb);
      } else {
        cb();
      }
    });
  });


  /**
   * Add a new readme to a project
   */

  app.task('new', function() {
    app.file('.verb.md', { contents: read(app, 'readme/basic.md') });
    return app.toStream('files')
      .pipe(app.conflicts(app.cwd))
      .pipe(app.dest(app.cwd));
  });

  /**
   * Templates
   */

  app.task('templates', { silent: true }, function(cb) {
    debug('loading templates');

    // load layout templates
    app.layouts('templates/layouts/*.md', { cwd: __dirname });

    // load include templates
    app.includes('templates/includes/**/*.md', { cwd: __dirname });
    app.includes(require('./templates/includes'));

    // load badges
    app.badges(require('./templates/badges'));

    // done
    debug('templates finished');
    diff('templates');
    cb();
  });

  /**
   * Readme task
   */

  app.task('readme', {silent: true}, ['middleware', 'templates', 'verbmd', 'data'], function(cb) {
    debug('starting readme task');

    app.toStream('files', filter(this))
      .on('error', console.log)
      .pipe(app.renderFile('*', app.cache.data))
      .on('error', console.log)
      .pipe(app.pipeline(app.options.pipeline))
      .on('error', console.log)
      .pipe(app.dest(function(file) {
        file.basename = 'README.md';
        return app.options.dest || app.cwd;
      }))
      .on('error', cb)
      .on('end', function() {
        diff('readme');
        cb();
      })
  });

  /**
   * Default task
   */

  app.task('default', ['readme'], function(cb) {
    this.on('finished', app.emit.bind(app, 'readme-generator:end'));
    cb();
  });

  return generator;
};

/**
 * Read a template
 *
 * @param {Object} `verb`
 * @param {String} `fp`
 * @param {String} `cwd`
 * @return {String}
 */

function read(app, fp, cwd) {
  cwd = cwd || app.env.templates || path.join(__dirname, 'templates');
  return fs.readFileSync(path.resolve(cwd, fp));
}

/**
 * Filter files to render
 */

function filter(app) {
  var readme = app.options.readme || 'readme';
  return function(key, file) {
    var name = file ? file.stem : key;
    if (new RegExp(readme, 'i').test(name)) {
      return true;
    }
  };
}

/**
 * Returns true if `app` is a valid "smart plugin" instance.
 *
 * @param {Object} `app`
 * @return {Boolean}
 */

function isValidInstance(app) {
  if (!app.isApp && !app.isGenerator && !app.isVerb) {
    return false;
  }
  if (app.isRegistered('verb-readme-generator')) {
    return false;
  }
  return true;
}
