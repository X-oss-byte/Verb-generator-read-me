'use strict';

var fs = require('fs');
var path = require('path');
var templates = path.resolve.bind(path, __dirname, 'templates');
var debug = require('debug')('base:verb:verb-readme-generator');
var setup = require('./lib/setup');
var sections = require('./lib/sections');
var depdocs = require('./lib/depdocs');
var helpers = require('./lib/helpers');
var utils = require('./lib/utils');
var lint = require('./lib/lint');

/**
 * Verb readme generator
 */

function generator(app, base) {
  if (!utils.isValid(app, 'verb-readme-generator')) return;

  /**
   * User's CWD
   */

  var cwd = path.resolve.bind(path, app.cwd);
  // get verb config object from package.json
  var config = app.base.get('cache.config') || {};

  /**
   * Helpers
   */

  helpers(app);
  depdocs(app);
  app.helpers(require('template-helpers')());

  /**
   * Set options
   */

  app.option(app.pkg.get('verb') || {});
  app.option('toc.footer', '\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_');
  app.option('engineOpts', {delims: ['{%', '%}']});
  app.option('toAlias', function readme(name) {
    var m = /^verb-(generate|helper|plugin)-(\w+)/.exec(name);
    return m ? m[1] : name.slice(name.lastIndexOf('-') + 1);
  });

  app.option('toc.linkify', function(token, name, slug, tocOpts) {
    if (/[{<]%=?/.test(name)) {
      var inst = new app.constructor();
      var opts = app.options;
      inst.engine('*', app.getEngine('*') || app.getEngine('md'));
      opts.engine = '*';
      inst.data(app.cache.data);
      var view = inst.view('toctemp.md', {content: name, layout: false});
      inst.compile(view, opts);
      token.content = view.fn(inst.cache.data);
    }
    utils.toc.linkify(token, name, slug, tocOpts);
    return token;
  });

  /**
   * Plugins
   */

  app.use(utils.conflicts());
  app.use(require('verb-defaults'));
  app.use(require('verb-collections'));
  app.use(require('verb-repo-helpers'));
  app.use(require('verb-repo-data'));
  app.use(require('verb-toc'));
  app.use(utils.questions());
  app.use(utils.loader());
  app.use(utils.pkg());

  /**
   * Engine
   */

  app.engine('hbs', require('engine-handlebars'));
  app.engine('md', app.getEngine('.*'));
  app.handler('prePipeline');

  /**
   * Generate `README.md` and fix missing [reflinks](#reflinks).
   *
   * ```sh
   * $ verb readme
   * ```
   * @name readme
   * @api public
   */

  app.task('readme', ['readme-build', 'readme-reflinks']);

  /**
   * Alias for the [readme]() task, generates a README.md to the user's working directory.
   *
   * ```sh
   * $ verb readme
   * ```
   * @name default
   * @api public
   */

  app.task('default', {silent: true}, ['readme']);

  /**
   * Initialize middleware used for rendering the [readme](#readme).
   *
   * ```sh
   * $ verb readme:readme-middleware
   * ```
   * @name readme-middleware
   */

  app.task('readme-middleware', { silent: true }, function(cb) {
    app.onLoad(/(verb|readme)\.md$/, lint.layout(app));
    app.preRender(/(verb|readme)\.md$/i, function(file, next) {
      utils.del(path.resolve(app.cwd, 'readme.md'), next);
    });

    app.onLoad(/\.verb\.md$/, function(file, next) {
      file.stem = 'readme';
      next();
    });

    app.preWrite(/\.md$/, function(file, next) {
      sections(app, file, next);
    });

    app.preWrite(/\.md$/, function(file, next) {
      app.union('cache.reflinks', file._reflinks);
      next();
    });
    cb();
  });

  /**
   * Loads data to used for rendering templates. Called by the [readme]() task.
   *
   * ```sh
   * $ verb readme:readme-data
   * ```
   * @name readme-data
   */

  app.task('readme-data', { silent: true }, function(cb) {
    debug('loading data');

    // temporary data
    setup.data(app);
    setup.options(app);

    if (!app.data('verb')) {
      app.data({verb: {}});
    }

    if (!app.data('verb.related.list')) {
      app.data('verb.related.list', []);
    }

    if (!app.data('name')) {
      app.data('name', app.pkg.get('name'));
    }

    if (utils.exists(cwd('bower.json'))) {
      app.data({bower: true});
    }

    app.data({prefix: 'Copyright'});
    app.data(app.base.cache.data);
    app.helpers(app.base._.helpers.async);
    app.helpers(app.base._.helpers.sync);
    debug('data finished');
    cb();
  });

  /**
   * Load layouts, includes and badges commonly used for generating a README.md.
   *
   * ```sh
   * $ verb readme:readme-templates
   * ```
   * @name readme-templates
   */

  app.task('readme-templates', { silent: true }, function(cb) {
    debug('loading templates');

    app.option('renameKey', function(key, file) {
      var name = file ? file.relative : path.relative(app.cwd, key);
      var ext = path.extname(name);
      var str = name.replace(/^(templates|docs)\/?(layouts|includes)\/?/, '');
      return ext ? str.slice(0, str.length - ext.length) : str;
    });

    // load `docs` templates in user cwd
    app.docs('*.md', {cwd: templates('docs')});
    if (utils.exists(cwd('docs')) && app.pkg.get('verb.options.docs') !== false) {
      app.docs('*.md', { cwd: path.resolve(app.cwd, 'docs') });
    }

    // load `layout` templates
    app.layouts('*.md', { cwd: templates('layouts') });

    // load `include` templates
    app.includes('**/*.md', { cwd: templates('includes') });
    app.includes(require('./templates/includes'));

    // load `badges` templates
    app.badges(require('./templates/badges'));
    if (typeof config.views === 'undefined') {
      cb();
      return;
    }

    // call `.config.process` again to override built-in templates
    // with any templates defined in `package.json`
    app.config.process({views: config.views}, function(err) {
      if (err) return cb(err);
      debug('templates finished');
      cb();
    });
  });

  /**
   * Load `options`, `plugins`, `middleware` and `data` before calling a task
   * to render templats.
   *
   * ```sh
   * $ verb readme:readme-setup
   * ```
   * @name readme-setup
   */

  app.task('readme-setup', {silent: true}, ['readme-data', 'readme-middleware', 'readme-templates']);

  /**
   * Run after other tasks to get any missing reflinks found in rendered markdown
   * documents, and add them to the `verb.reflinks` array in package.json. Verb
   * uses this array to generate reflinks so that missing reflinks will still resolve.
   *
   * ```sh
   * $ verb readme:readme-reflinks
   * ```
   * @name readme-reflinks
   */

  app.task('readme-reflinks', {silent: true}, function(cb) {
    var existing = app.pkg.get('verb.reflinks') || [];
    var reflinks = app.get('cache.reflinks') || [];
    var diff = utils.diff(reflinks, existing);

    if (diff.length > 1) {
      app.pkg.union('verb.reflinks', diff);
      app.pkg.save();
      app.pkg.logInfo('updated package.json with:', {reflinks: diff});
    }
    cb();
  });

  /**
   * Generate a README.md from a `.verb.md` template. Runs the [setup](), and [verbmd]() tasks.
   * This is a [verb][docs]{tasks.md#silent} task.
   *
   * ```sh
   * $ verb readme:readme-build
   * ```
   * @name readme-build
   */

  app.task('readme-build', {silent: true}, ['readme-setup', 'verbmd'], function(cb) {
    debug('starting readme task');
    var srcBase = app.options.srcBase || app.cwd;
    var file = app.options.readme || '.verb.md';

    app.src(file, {cwd: srcBase})
      .pipe(app.renderFile('hbs', app.cache.data))
      .pipe(app.renderFile('md', app.cache.data))
      .pipe(utils.handle(app, 'prePipeline'))
      .pipe(utils.reflinks(app.options))
      .pipe(app.pipeline(app.options.pipeline))
      .pipe(app.dest(function(file) {
        file.basename = 'README.md';
        return app.cwd;
      }))
      .on('error', cb)
      .on('end', cb);
  });

  /**
   * Load the `.verb.md` in the user's current working directory. If no `.verb.md`
   * file exists, the [prompt-verbmd)() task is called to ask the user if they want to
   * add the file. Disable the prompt by passing `--verbmd=false` on the command line,
   * or `app.disable('verbmd')` via API.
   *
   * ```sh
   * $ verb readme:verbmd
   * ```
   * @name verbmd
   */

  app.task('verbmd', { silent: true }, function(cb) {
    debug('loading .verb.md');
    if (app.views.files['README'] || app.views.files['.verb'] || app.options.verbmd === false) {
      cb();
      return;
    }

    // try to load ".verb.md" or custom file from user cwd
    var srcBase = app.options.srcBase || app.cwd;
    var readme = path.resolve(srcBase, app.options.readme || '.verb.md');
    if (utils.exists(readme)) {
      app.file('README.md', readTemplate(app, readme, srcBase));
      cb();
      return;
    }
    app.build('verbmd-prompt', cb);
  });

  /**
   * Generate a new `.verb.md` template to the current working directory. This task is
   * also aliased as `verbmd-new` to provide a semantic task name when this generator is
   * used as a plugin.
   *
   * ```sh
   * $ verb readme:new
   * # or
   * $ verb readme:verbmd-new
   * ```
   * @name new
   */

  app.task('new', ['verbmd-new']);
  app.task('verbmd-new', function() {
    return app.src('basic.md', {cwd: templates('verbmd')})
      .pipe(app.conflicts(app.cwd))
      .pipe(app.dest(function(file) {
        file.basename = '.verb.md';
        return app.cwd;
      }));
  });

  /**
   * Prompts the user to add a new `.verb.md` template to the current working directory.
   * Useful in sub-generators.
   *
   * ```sh
   * $ verb readme:verbmd-prompt
   * # alias aliased as
   * $ verb readme:ask
   * ```
   * @name verbmd-prompt
   */

  app.task('verbmd-prompt', function(cb) {
    // if no .verb.md exists, offer to add one
    app.confirm('verbmd', 'Can\'t find a .verb.md, want to add one?');
    app.ask('verbmd', { save: false }, function(err, answers) {
      if (err) return cb(err);
      if (answers.verbmd) {
        app.build('new', cb);
      } else {
        cb();
      }
    });
  });

  return generator;
}

/**
 * Read a template
 *
 * @param {Object} `verb`
 * @param {String} `fp`
 * @param {String} `base`
 * @return {String}
 */

function readTemplate(app, filepath, base) {
  var dir = base || app.env.templates || templates();
  var absolute = path.resolve(path.resolve(dir), filepath);
  return {
    contents: fs.readFileSync(absolute),
    path: absolute
  };
}

/**
 * Expose `generator`
 */

module.exports = generator;
